{"version":3,"sources":["../../../src/backend/dispatch/index.ts"],"names":["unsafeGlobal","global","WebSocket","require","PlatformEvents","Dispatch","config","options","projectId","projectToken","shardName","maxConnectionsPerShard","authorization","params","Object","keys","reduce","acc","cur","push","encodeURIComponent","authToken","url","join","axios","get","data","Promise","resolve","ws","Sockette","timeout","maxAttempts","onmessage","e","handleMessage","onreconnect","handleReconnect","onmaximum","handleMaximum","onclose","handleClose","onerror","handleError","JSON","parse","eventName","latencyMs","payload","CONNECTED","initialConnection","isConnected","identify","clientId","eventHandlers","forEach","handler","callback","messageQueue","send","console","error","handlerId","id","filter","userInfo","emitEvent","SET_USER_INFO","IDENTIFY","token","recipients","message","stringify","length","Error","close","Base"],"mappings":"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","sourcesContent":["import { v4 as uuidv4 } from 'uuid';\nimport Sockette from 'sockette';\nimport axios from 'axios';\nimport { Base, BackendConfigurationInput } from '../base';\n\nconst unsafeGlobal: any = global;\nunsafeGlobal.WebSocket = require('isomorphic-ws');\n\ninterface DispatchConfigurationInput extends BackendConfigurationInput {\n  shardName?: string | null;\n  maxConnectionsPerShard?: number;\n  authorization?: string;\n}\n\ninterface DispatchOptions {\n  projectId: string;\n  projectToken?: string;\n  shardName?: string | null;\n  maxConnectionsPerShard?: number;\n  authorization?: string;\n  [index: string]: any;\n}\n\nexport enum PlatformEvents {\n  CONNECTED = '@@KOJI_DISPATCH/CONNECTED',\n  CONNECTED_CLIENTS_CHANGED = '@@KOJI_DISPATCH/CONNECTED_CLIENTS_CHANGED',\n  IDENTIFY = '@@KOJI_DISPATCH/IDENTIFY',\n  SET_USER_INFO = '@@KOJI_DISPATCH/SET_USER_INFO',\n}\n\nexport interface MessageHandler {\n  id: string;\n  eventName: string;\n  callback: MessageHandlerCallback;\n}\n\nexport type MessageHandlerCallback = (payload: { [index: string]: any }, metadata: { latencyMs?: number }) => void;\n\nexport interface ShardInfo {\n  shardName: string;\n  numConnectedClients: number;\n}\n\nexport interface ConnectionInfo {\n  clientId?: string;\n  shardName: string;\n}\n\nexport class Dispatch extends Base {\n  private authToken?: string;\n  private url: string;\n\n  private initialConnection: boolean = false;\n  private isConnected: boolean = false;\n  private eventHandlers: MessageHandler[] = [];\n  private messageQueue: string[] = [];\n  private ws: Sockette | null = null;\n\n  constructor(config: DispatchConfigurationInput) {\n    super(config);\n\n    const options: DispatchOptions = {\n      projectId: this.projectId,\n      projectToken: this.projectToken,\n      shardName: config.shardName,\n      maxConnectionsPerShard: config.maxConnectionsPerShard || 100,\n      authorization: config.authorization,\n    };\n\n    const params: string[] = Object.keys(options).reduce((acc: string[], cur) => {\n      if (options[cur]) {\n        acc.push(`${cur}=${encodeURIComponent(options[cur])}`);\n      }\n      return acc;\n    }, []);\n\n    this.authToken = config.authorization;\n    this.url = `wss://dispatch.api.gokoji.com?${params.join('&')}`;\n  }\n\n  public async info(): Promise<ShardInfo[]> {\n    const { data } = await axios.get(`https://dispatch-info.api.gokoji.com/info/${this.projectId}`);\n    return (data || [])[0];\n  }\n\n  private async connect(): Promise<ConnectionInfo> {\n    return new Promise((resolve) => {\n      if (this.ws) {\n        return;\n      }\n\n      // Create a socket connection to the dispatch server\n      this.ws = new Sockette(this.url, {\n        timeout: 5e3,\n        maxAttempts: 10,\n        onmessage: (e) => this.handleMessage(e, resolve),\n        onreconnect: () => this.handleReconnect(),\n        onmaximum: () => this.handleMaximum(),\n        onclose: () => this.handleClose(),\n        onerror: (e) => this.handleError(e),\n      });\n    });\n  }\n\n  private handleMessage({ data }: { data: string }, resolve: Function) {\n    const { eventName, latencyMs, payload } = JSON.parse(data || '{}');\n\n    if (eventName === PlatformEvents.CONNECTED) {\n      this.initialConnection = true;\n      this.isConnected = true;\n      if (this.authToken) this.identify(this.authToken);\n      resolve({\n        clientId: payload.clientId,\n        shardName: payload.shardName,\n      });\n      return;\n    }\n\n    this.eventHandlers.forEach((handler) => {\n      if (eventName === handler.eventName) {\n        handler.callback(payload, { latencyMs });\n      }\n    });\n  }\n\n  private handleReconnect() {\n    this.isConnected = true;\n    this.messageQueue = this.messageQueue.reduce((acc, cur) => {\n      if (this.ws) {\n        this.ws.send(cur);\n      }\n      return acc;\n    }, []);\n  }\n\n  private handleMaximum() {}\n\n  private handleClose() {\n    this.isConnected = false;\n  }\n\n  private handleError(e: Event) {\n    console.error('[Koji Dispatch] error', e);\n  }\n\n  public on(eventName: string, callback: MessageHandlerCallback): Function {\n    const handlerId = uuidv4();\n\n    this.eventHandlers.push({\n      id: handlerId,\n      eventName,\n      callback,\n    });\n\n    return () => {\n      this.eventHandlers = this.eventHandlers.filter(({ id }) => id !== handlerId);\n    };\n  }\n\n  public setUserInfo(userInfo: { [index: string]: any }) {\n    this.emitEvent(PlatformEvents.SET_USER_INFO, userInfo);\n  }\n\n  public identify(authToken: string) {\n    this.emitEvent(PlatformEvents.IDENTIFY, {\n      token: authToken,\n    });\n  }\n\n  public emitEvent(eventName: string, payload: { [index: string]: any }, recipients?: string[]) {\n    const message = JSON.stringify({\n      eventName,\n      payload,\n      recipients,\n    });\n\n    // Discard a long message\n    if (message.length > 128e3) {\n      throw new Error('Message is too long to be sent through Koji Dispatch. Messages must be less than 128kb');\n    }\n\n    // Check instantiation\n    if (!this.initialConnection || !this.ws) {\n      throw new Error('Please make sure you have called and awaited `connect()` before attempting to send a message');\n    }\n\n    // If the connection has dropped, push the message into a queue\n    if (!this.isConnected) {\n      this.messageQueue.push(message);\n      return;\n    }\n\n    this.ws.send(message);\n  }\n\n  public disconnect() {\n    if (this.ws) this.ws.close();\n    this.ws = null;\n  }\n}\n"],"file":"index.js"}