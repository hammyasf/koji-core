{"version":3,"sources":["../../../src/frontend/remix/index.ts"],"names":["Remix","remixData","Error","isInitialized","console","warn","overrides","window","KOJI_OVERRIDES","values","arrayMerge","dest","source","newValue","sendValues","newValues","sendMessage","kojiEventName","plaintextValue","sendMessageAndAwaitResponse","data","encryptedValue","path","skipUpdate","KojiBridge","client","remix"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;IAcaA,K;;;;;;;;;;;;;;;+FACW,E;sGACW,K;;;;;;yBAG5BC,S,EAAgB;AACnB,UAAI,CAACA,SAAL,EAAgB,MAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;;AAEhB,UAAI,KAAKC,aAAT,EAAwB;AACtBC,QAAAA,OAAO,CAACC,IAAR,CAAa,+HAAb;AACA;AACD;;AAED,WAAKF,aAAL,GAAqB,IAArB;AAEA,UAAIG,SAAS,GAAG,EAAhB;;AACA,UAAIC,MAAM,CAACC,cAAP,IAAyBD,MAAM,CAACC,cAAP,CAAsBF,SAAnD,EAA8D;AAC5DA,QAAAA,SAAS,GAAGC,MAAM,CAACC,cAAP,CAAsBF,SAAtB,CAAgCL,SAAhC,IAA6C,EAAzD;AACD;;AAED,WAAKQ,MAAL,GAAc,2BAAUR,SAAV,EAAqBK,SAArB,EAAgC;AAC5CI,QAAAA,UAAU,EAAE,oBAACC,IAAD,EAAOC,MAAP;AAAA,iBAAkBA,MAAlB;AAAA;AADgC,OAAhC,CAAd;AAGD;;;0BAGY;AACX,aAAO,KAAKH,MAAZ;AACD;;;wBAGUI,Q,EAAoC;AAC7C,WAAKJ,MAAL,GAAc,2BAAU,KAAKA,MAAf,EAAuBI,QAAvB,EAAiC;AAC7CH,QAAAA,UAAU,EAAE,oBAACC,IAAD,EAAOC,MAAP;AAAA,iBAAkBA,MAAlB;AAAA;AADiC,OAAjC,CAAd;AAGA,aAAO,KAAKE,UAAL,EAAP;AACD;;;8BAGgBC,S,EAAqC;AACpD,WAAKN,MAAL,GAAcM,SAAd;AACA,aAAO,KAAKD,UAAL,EAAP;AACD;;;6BAGe;AACd,WAAKE,WAAL,CAAiB;AACfC,QAAAA,aAAa,EAAE;AADA,OAAjB;AAGD;;;;yHAGyBC,c;;;;;;;uBACG,KAAKC,2BAAL,CACzB;AACEF,kBAAAA,aAAa,EAAE,0BADjB;AAEEG,kBAAAA,IAAI,EAAE;AACJF,oBAAAA,cAAc,EAAdA;AADI;AAFR,iBADyB,EAOzB,4BAPyB,C;;;AAArBE,gBAAAA,I;iDAUCA,I;;;;;;;;;;;;;;;;;;;0HAIiBC,c;;;;;;;uBACG,KAAKF,2BAAL,CACzB;AACEF,kBAAAA,aAAa,EAAE,0BADjB;AAEEG,kBAAAA,IAAI,EAAE;AACJC,oBAAAA,cAAc,EAAdA;AADI;AAFR,iBADyB,EAOzB,4BAPyB,C;;;AAArBD,gBAAAA,I;kDAUCA,I;;;;;;;;;;;;;;;;;;;;;;;;;;uBAI0B,KAAKD,2BAAL,CAC/B;AACEF,kBAAAA,aAAa,EAAE,sBADjB;AAEEG,kBAAAA,IAAI,EAAE;AACJE,oBAAAA,IAAI,EAAE,CAAC,WAAD,CADF;AAEJT,oBAAAA,QAAQ,EAAE,KAAKJ,MAFX;AAGJc,oBAAAA,UAAU,EAAE;AAHR;AAFR,iBAD+B,EAS/B,0BAT+B,C;;;AAA3BH,gBAAAA,I;kDAYC,CAAC,CAACA,I;;;;;;;;;;;;;;;;;;EA9FcI,sB,kFAIxBC,c,sJAqBAA,c,qJAKAA,c,2JAQAA,c,8JAMAA,c,iKAOAA,c,uKAeAA,c;;AAgCI,IAAMC,KAAK,GAAG,IAAI1B,KAAJ,EAAd","sourcesContent":["import deepmerge from 'deepmerge';\nimport { client } from '../@decorators/client';\nimport { KojiBridge } from '../kojiBridge';\n\ndeclare global {\n  interface Window {\n    KOJI_OVERRIDES: any;\n  }\n}\n\nexport interface ValueChanged {\n  path: string[];\n  newValue: any;\n  savedValue: any;\n}\n\nexport class Remix extends KojiBridge {\n  private values: any = {};\n  private isInitialized: boolean = false;\n\n  @client\n  init(remixData: any) {\n    if (!remixData) throw new Error('Unable to find remixData');\n\n    if (this.isInitialized) {\n      console.warn('You are trying to initialize your remix data more than one time. Note that Koji.config() will automatically call this method.');\n      return;\n    }\n\n    this.isInitialized = true;\n\n    let overrides = {};\n    if (window.KOJI_OVERRIDES && window.KOJI_OVERRIDES.overrides) {\n      overrides = window.KOJI_OVERRIDES.overrides.remixData || {};\n    }\n\n    this.values = deepmerge(remixData, overrides, {\n      arrayMerge: (dest, source) => source,\n    });\n  }\n\n  @client\n  public get() {\n    return this.values;\n  }\n\n  @client\n  public set(newValue: Object): Promise<boolean> {\n    this.values = deepmerge(this.values, newValue, {\n      arrayMerge: (dest, source) => source,\n    });\n    return this.sendValues();\n  }\n\n  @client\n  public overwrite(newValues: Object): Promise<boolean> {\n    this.values = newValues;\n    return this.sendValues();\n  }\n\n  @client\n  public finish() {\n    this.sendMessage({\n      kojiEventName: 'KojiPreview.Finish',\n    });\n  }\n\n  @client\n  public async encryptValue(plaintextValue: string): Promise<string> {\n    const data: string = await this.sendMessageAndAwaitResponse(\n      {\n        kojiEventName: 'KojiPreview.EncryptValue',\n        data: {\n          plaintextValue,\n        },\n      },\n      'KojiPreview.ValueEncrypted',\n    );\n\n    return data;\n  }\n\n  @client\n  public async decryptValue(encryptedValue: string) {\n    const data: string = await this.sendMessageAndAwaitResponse(\n      {\n        kojiEventName: 'KojiPreview.DecryptValue',\n        data: {\n          encryptedValue,\n        },\n      },\n      'KojiPreview.ValueDecrypted',\n    );\n\n    return data;\n  }\n\n  private async sendValues() {\n    const data: ValueChanged = await this.sendMessageAndAwaitResponse(\n      {\n        kojiEventName: 'KojiPreview.SetValue',\n        data: {\n          path: ['remixData'],\n          newValue: this.values,\n          skipUpdate: false,\n        },\n      },\n      'KojiPreview.DidChangeVcc',\n    );\n\n    return !!data;\n  }\n}\n\nexport const remix = new Remix();\n"],"file":"index.js"}