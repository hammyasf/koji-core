{"version":3,"sources":["../../../src/frontend/iap/index.ts"],"names":["IAP","window","addEventListener","data","event","purchaseCallback","Error","success","userToken","receiptId","undefined","sku","purchaseOptions","sendMessageAndAwaitResponse","kojiEventName","KojiBridge","client","iap"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;IAaaA,G;;;;;;;;;;;;;;;;;;;;;+BAGA;AAAA;;AACTC,MAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmC,gBAAc;AAAA,YAAXC,IAAW,QAAXA,IAAW;AAAA,YACvCC,KADuC,GAC7BD,IAD6B,CACvCC,KADuC;;AAG/C,YAAIA,KAAK,KAAK,0BAAd,EAA0C;AACxC,cAAI,CAAC,MAAI,CAACC,gBAAV,EAA4B,MAAM,IAAIC,KAAJ,CAAU,gEAAV,CAAN;;AAE5B,UAAA,MAAI,CAACD,gBAAL,CAAsBF,IAAI,CAACI,OAA3B,EAAoCJ,IAAI,CAACK,SAAzC,EAAoDL,IAAI,CAACM,SAAzD;;AACA,UAAA,MAAI,CAACJ,gBAAL,GAAwBK,SAAxB;AACD;AACF,OATD;AAUD;;;;0HAGmBC,G;;;;;;;;;;;;AAAaC,gBAAAA,e,2DAAmC,E;;uBAClB,KAAKC,2BAAL,CAAiC;AAC/EC,kBAAAA,aAAa,EAAE,2BADgE;AAE/EX,kBAAAA,IAAI,EAAE;AACJQ,oBAAAA,GAAG,EAAHA,GADI;AAEJC,oBAAAA,eAAe,EAAfA;AAFI;AAFyE,iBAAjC,EAM7C,0BAN6C,C;;;;AAAxCL,gBAAAA,O,yBAAAA,O;AAASC,gBAAAA,S,yBAAAA,S;AAAWC,gBAAAA,S,yBAAAA,S;iDAQrB;AACLF,kBAAAA,OAAO,EAAPA,OADK;AAELC,kBAAAA,SAAS,EAATA,SAFK;AAGLC,kBAAAA,SAAS,EAATA;AAHK,iB;;;;;;;;;;;;;;;;;;EA1BcM,kB,2FAgBtBC,c;;AAkBI,IAAMC,GAAG,GAAG,IAAIjB,GAAJ,EAAZ","sourcesContent":["import { KojiBridge } from '../bridge';\nimport { client } from '../@decorators/client';\n\nexport interface PurchaseOptions {\n  amount?: number;\n  customMessage?: string;\n}\n\nexport interface Purchase {\n  success: boolean;\n  userToken: UserToken;\n  receiptId?: string;\n}\n\nexport class IAP extends KojiBridge {\n  purchaseCallback?: Function;\n\n  register() {\n    window.addEventListener('message', ({ data }) => {\n      const { event } = data;\n\n      if (event === 'KojiIap.PurchaseFinished') {\n        if (!this.purchaseCallback) throw new Error('Received purchase information but no purchase has been started');\n\n        this.purchaseCallback(data.success, data.userToken, data.receiptId);\n        this.purchaseCallback = undefined;\n      }\n    });\n  }\n\n  @client\n  async startPurchase(sku: string, purchaseOptions: PurchaseOptions = {}): Promise<Purchase> {\n    const { success, userToken, receiptId } = await this.sendMessageAndAwaitResponse({\n      kojiEventName: '@@koji/iap/promptPurchase',\n      data: {\n        sku,\n        purchaseOptions,\n      },\n    }, 'KojiIap.PurchaseFinished');\n\n    return {\n      success,\n      userToken,\n      receiptId,\n    };\n  }\n}\n\nexport const iap = new IAP();\n"],"file":"index.js"}