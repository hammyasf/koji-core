{"version":3,"sources":["../../../src/frontend/remix/index.ts"],"names":["Remix","callback","listen","isRemixing","editorAttributes","KojiBridge","client","remix"],"mappings":";;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;IAYaA,K;;;;;;;;;;;;;8BAEDC,Q,EAAwC;AAChD,aAAO,KAAKC,MAAL,CACL,gBAAmG;AAAA,YAAhGC,UAAgG,QAAhGA,UAAgG;AAAA,YAApFC,gBAAoF,QAApFA,gBAAoF;AACjGH,QAAAA,QAAQ,CAACE,UAAD,EAAaC,gBAAb,CAAR;AACD,OAHI,EAIL,wBAJK,CAAP;AAMD;;;;EATwBC,kB,8DACxBC,c;;AAWI,IAAMC,KAAK,GAAG,IAAIP,KAAJ,EAAd","sourcesContent":["import { KojiBridge } from '../bridge';\nimport { client } from '../@decorators/client';\n\ntype EditorType = 'instant' | 'full';\ntype EditorMode = 'edit' | 'new';\n\ninterface EditorAttributes {\n  type?: EditorType;\n  mode?: EditorMode;\n}\n\ntype IsRemixingCallback = (isRemixing: boolean, editorAttributes: EditorAttributes) => Function;\n\nexport class Remix extends KojiBridge {\n  @client\n  subscribe(callback: IsRemixingCallback): Function {\n    return this.listen(\n      ({ isRemixing, editorAttributes }: { isRemixing: boolean; editorAttributes: EditorAttributes }) => {\n        callback(isRemixing, editorAttributes);\n      },\n      'KojiPreview.IsRemixing',\n    );\n  }\n}\n\nexport const remix = new Remix();\n"],"file":"index.js"}