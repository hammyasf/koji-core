{"version":3,"sources":["../../../src/frontend/identity/index.ts"],"names":["AuthGrantCapability","Identity","postToPlatform","kojiEventName","data","grants","allowAnonymous","token","hasGrants","usageDescription","KojiBridge","client","identity"],"mappings":";;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEYA,mB;;;WAAAA,mB;AAAAA,EAAAA,mB;AAAAA,EAAAA,mB;GAAAA,mB,mCAAAA,mB;;IAKCC,Q;;;;;;;;;;;;;;;;;;;;;;uBAGe,KAAKC,cAAL,CAAoB;AAC1CC,kBAAAA,aAAa,EAAE,sBAD2B;AAE1CC,kBAAAA,IAAI,EAAE;AACJC,oBAAAA,MAAM,EAAE,EADJ;AAEJC,oBAAAA,cAAc,EAAE;AAFZ;AAFoC,iBAApB,EAMrB,uBANqB,C;;;;AAAhBC,gBAAAA,K,yBAAAA,K;iDAQDA,K;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGSF,gBAAAA,M,8DAAgC,E;;uBACpB,KAAKH,cAAL,CAAoB;AAC9CC,kBAAAA,aAAa,EAAE,wBAD+B;AAE9CC,kBAAAA,IAAI,EAAE;AACJC,oBAAAA,MAAM,EAANA;AADI;AAFwC,iBAApB,EAKzB,yBALyB,C;;;;AAApBG,gBAAAA,S,0BAAAA,S;kDAODA,S;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGWH,gBAAAA,M,8DAAgC,E;AAAII,gBAAAA,gB;;uBAC1B,KAAKP,cAAL,CAAoB;AAC9CC,kBAAAA,aAAa,EAAE,sBAD+B;AAE9CC,kBAAAA,IAAI,EAAE;AACJC,oBAAAA,MAAM,EAANA,MADI;AAEJI,oBAAAA,gBAAgB,EAAhBA;AAFI;AAFwC,iBAApB,EAMzB,uBANyB,C;;;;AAApBD,gBAAAA,S,0BAAAA,S;kDAQDA,S;;;;;;;;;;;;;;;;;;;EAlCmBE,kB,6DAC3BC,c;;AAqCI,IAAMC,QAAQ,GAAG,IAAIX,QAAJ,EAAjB","sourcesContent":["import { KojiBridge } from '../bridge';\nimport { client } from '../@decorators/client';\n\nexport enum AuthGrantCapability {\n  PUSH_NOTIFICATIONS = 'push_notifications',\n  USERNAME = 'username',\n}\n\nexport class Identity extends KojiBridge {\n  @client\n  async getToken(): Promise<UserToken> {\n    const { token } = await this.postToPlatform({\n      kojiEventName: '@@koji/auth/getToken',\n      data: {\n        grants: [],\n        allowAnonymous: true,\n      },\n    }, 'KojiAuth.TokenCreated');\n\n    return token;\n  }\n\n  async checkGrants(grants: AuthGrantCapability[] = []): Promise<boolean> {\n    const { hasGrants } = await this.postToPlatform({\n      kojiEventName: '@@koji/auth/checkGrant',\n      data: {\n        grants,\n      },\n    }, 'KojiAuth.GrantsResolved');\n\n    return hasGrants;\n  }\n\n  async requestGrants(grants: AuthGrantCapability[] = [], usageDescription?: string): Promise<UserToken> {\n    const { hasGrants } = await this.postToPlatform({\n      kojiEventName: '@@koji/auth/getToken',\n      data: {\n        grants,\n        usageDescription,\n      },\n    }, 'KojiAuth.TokenCreated'); // Would be great to have a method-specific message here\n\n    return hasGrants;\n  }\n}\n\nexport const identity = new Identity();\n"],"file":"index.js"}