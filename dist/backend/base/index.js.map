{"version":3,"sources":["../../../src/backend/base/index.ts"],"names":["generateConfig","config","projectId","projectToken","res","locals","KOJI_PROJECT_ID","KOJI_PROJECT_TOKEN","Error","Base"],"mappings":";;;;;;;;;;;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,cAAT,CAAwBC,MAAxB,EAAiF;AACtF,MAAIC,SAAJ;AACA,MAAIC,YAAJ,CAFsF,CAItF;AACA;;AACA,MAAIF,MAAM,CAACG,GAAX,EAAgB;AAAA,eACsDH,MAAM,CAACG,GAAP,CAAWC,MAAX,IAAqB,EAD3E;;AACMH,IAAAA,SADN,QACXI,eADW;AACqCH,IAAAA,YADrC,QACiBI,kBADjB;;AAEd,QAAI,CAACL,SAAD,IAAc,CAACC,YAAnB,EAAiC;AAC/B,YAAM,IAAIK,KAAJ,CACJ,mHADI,CAAN;AAGD;AACF,GAbqF,CAetF;AACA;;;AACAN,EAAAA,SAAS,GAAGD,MAAM,CAACC,SAAP,IAAoBA,SAAhC;AACAC,EAAAA,YAAY,GAAGF,MAAM,CAACE,YAAP,IAAuBA,YAAtC;AAEA,MAAI,CAACD,SAAD,IAAc,CAACC,YAAnB,EAAiC,MAAM,IAAIK,KAAJ,CAAU,gCAAV,CAAN;AAEjC,SAAO;AACLN,IAAAA,SAAS,EAATA,SADK;AAELC,IAAAA,YAAY,EAAZA;AAFK,GAAP;AAID;;IAEYM,I,GAIX,cAAYR,MAAZ,EAA+C;AAAA;;AAAA;;AAAA;;AAAA,wBACTD,cAAc,CAACC,MAAD,CADL;AAAA,MACrCC,SADqC,mBACrCA,SADqC;AAAA,MAC1BC,YAD0B,mBAC1BA,YAD0B;;AAG7C,OAAKD,SAAL,GAAiBA,SAAjB;AACA,OAAKC,YAAL,GAAoBA,YAApB;AACD,C","sourcesContent":["import { Response } from 'express';\n\nexport interface BackendConfigurationInput {\n  projectId?: string;\n  projectToken?: string;\n  res?: Response;\n}\n\nexport interface BackendConfiguration {\n  projectId: string;\n  projectToken: string;\n}\n\n/**\n * Extensibly generate a project configuration\n * @param config Information about the project\n * @param config.projectId The projectId (This will override data passed through res)\n * @param config.projectToken The projectToken (This will override data passed through res)\n * @param config.res An express response object (Used in conjunction with KojiBackend.middleware)\n */\nexport function generateConfig(config: BackendConfigurationInput): BackendConfiguration {\n  let projectId;\n  let projectToken;\n\n  // If the user is passing a response from express, we expect the project details to be written\n  // to res.locals by the middleware.\n  if (config.res) {\n    ({ KOJI_PROJECT_ID: projectId, KOJI_PROJECT_TOKEN: projectToken } = config.res.locals || {});\n    if (!projectId || !projectToken) {\n      throw new Error(\n        'The res.locals object is missing your project information. Have you implemented KojiBackend.middleware correctly?',\n      );\n    }\n  }\n\n  // If the user is explicitly passing a projectId or projectToken, these values should override\n  // other implementations\n  projectId = config.projectId || projectId;\n  projectToken = config.projectToken || projectToken;\n\n  if (!projectId || !projectToken) throw new Error('Unable to find project details');\n\n  return {\n    projectId,\n    projectToken,\n  };\n}\n\nexport class Base {\n  protected projectId: string;\n  protected projectToken: string;\n\n  constructor(config: BackendConfigurationInput) {\n    const { projectId, projectToken } = generateConfig(config);\n\n    this.projectId = projectId;\n    this.projectToken = projectToken;\n  }\n}\n\nexport interface IDatabase extends Base {}\n"],"file":"index.js"}