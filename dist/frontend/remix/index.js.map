{"version":3,"sources":["../../../src/frontend/remix/index.ts"],"names":["Remix","callback","execCallbackOnMessage","isRemixing","editorAttributes","values","Error","window","KOJI_OVERRIDES","overrides","arrayMerge","dest","source","path","pointer","i","length","newValue","sendMessageAndAwaitResponse","kojiEventName","data","skipUpdate","KojiBridge","client","remix"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAgBaA,K;;;;;;;;;;;;;;;;;;;;;;;8BAIDC,Q,EAAwC;AAChD,aAAO,KAAKC,qBAAL,CACL,gBAAmG;AAAA,YAAhGC,UAAgG,QAAhGA,UAAgG;AAAA,YAApFC,gBAAoF,QAApFA,gBAAoF;AACjGH,QAAAA,QAAQ,CAACE,UAAD,EAAaC,gBAAb,CAAR;AACD,OAHI,EAIL,wBAJK,CAAP;AAMD;;;yBAEIC,M,EAAa;AAChB,UAAI,KAAKA,MAAT,EAAiB,MAAM,IAAIC,KAAJ,CAAU,kEAAV,CAAN;;AAEjB,UAAIC,MAAM,CAACC,cAAP,IAAyBD,MAAM,CAACC,cAAP,CAAsBC,SAAnD,EAA8D;AAC5D,aAAKJ,MAAL,GAAc,2BAAUA,MAAV,EAAkBE,MAAM,CAACC,cAAP,CAAsBC,SAAxC,EAAmD;AAC/DC,UAAAA,UAAU,EAAE,oBAACC,IAAD,EAAOC,MAAP;AAAA,mBAAkBA,MAAlB;AAAA;AADmD,SAAnD,CAAd;AAGD,OAJD,MAIO;AACL,aAAKP,MAAL,GAAcA,MAAd;AACD;AACF;;;wBAEGQ,I,EAAgB;AAClB,UAAIC,OAAO,GAAG,KAAKT,MAAnB;;AACA,WAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACG,MAAzB,EAAiCD,CAAC,IAAI,CAAtC,EAAyC;AACvCD,QAAAA,OAAO,GAAGA,OAAO,CAACD,IAAI,CAACE,CAAD,CAAL,CAAjB;AACD;;AACD,aAAOD,OAAP;AACD;;;;0FAESD,I,EAAcI,Q;;;;;;;uBACE,KAAKC,2BAAL,CACtB;AACEC,kBAAAA,aAAa,EAAE,sBADjB;AAEEC,kBAAAA,IAAI,EAAE;AACJP,oBAAAA,IAAI,EAAJA,IADI;AAEJI,oBAAAA,QAAQ,EAARA,QAFI;AAGJI,oBAAAA,UAAU,EAAE;AAHR;AAFR,iBADsB,EAStB,0BATsB,C;;;AAAlBD,gBAAAA,I;iDAYCA,I;;;;;;;;;;;;;;;;;;;EA9CgBE,kB,sEAGxBC,c;;AA+CI,IAAMC,KAAK,GAAG,IAAIxB,KAAJ,EAAd","sourcesContent":["import deepmerge from 'deepmerge';\nimport { KojiBridge } from '../bridge';\nimport { client } from '../@decorators/client';\n\ndeclare global {\n  interface Window { KOJI_OVERRIDES: any; }\n}\n\ntype EditorType = 'instant' | 'full';\ntype EditorMode = 'edit' | 'new';\n\ninterface EditorAttributes {\n  type?: EditorType;\n  mode?: EditorMode;\n}\n\ntype IsRemixingCallback = (isRemixing: boolean, editorAttributes: EditorAttributes) => Function;\n\nexport class Remix extends KojiBridge {\n  private values: any;\n\n  @client\n  subscribe(callback: IsRemixingCallback): Function {\n    return this.execCallbackOnMessage(\n      ({ isRemixing, editorAttributes }: { isRemixing: boolean; editorAttributes: EditorAttributes }) => {\n        callback(isRemixing, editorAttributes);\n      },\n      'KojiPreview.IsRemixing',\n    );\n  }\n\n  init(values: any) {\n    if (this.values) throw new Error('You are trying to initialize your remix data more than one time.');\n\n    if (window.KOJI_OVERRIDES && window.KOJI_OVERRIDES.overrides) {\n      this.values = deepmerge(values, window.KOJI_OVERRIDES.overrides, {\n        arrayMerge: (dest, source) => source,\n      });\n    } else {\n      this.values = values;\n    }\n  }\n\n  get(path: string[]) {\n    let pointer = this.values;\n    for (let i = 0; i < path.length; i += 1) {\n      pointer = pointer[path[i]];\n    }\n    return pointer;\n  }\n\n  async set(path: string, newValue: any): Promise<any> {\n    const data: any = await this.sendMessageAndAwaitResponse(\n      {\n        kojiEventName: 'KojiPreview.SetValue',\n        data: {\n          path,\n          newValue,\n          skipUpdate: true,\n        },\n      },\n      'KojiPreview.DidChangeVcc',\n    );\n\n    return data;\n  }\n}\n\nexport const remix = new Remix();\n"],"file":"index.js"}