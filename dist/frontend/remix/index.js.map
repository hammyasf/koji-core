{"version":3,"sources":["../../../src/frontend/remix/index.ts"],"names":["Remix","callback","execCallbackOnMessage","isRemixing","editorAttributes","values","isInitialized","console","warn","window","KOJI_OVERRIDES","overrides","remixData","arrayMerge","dest","source","newValue","sendMessage","kojiEventName","data","path","skipUpdate","KojiBridge","client","remix"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;IAgBaA,K;;;;;;;;;;;;;;;+FACW,E;sGACW,K;;;;;;8BAGvBC,Q,EAAwC;AAChD,aAAO,KAAKC,qBAAL,CACL,gBAAmG;AAAA,YAAhGC,UAAgG,QAAhGA,UAAgG;AAAA,YAApFC,gBAAoF,QAApFA,gBAAoF;AACjGH,QAAAA,QAAQ,CAACE,UAAD,EAAaC,gBAAb,CAAR;AACD,OAHI,EAIL,wBAJK,CAAP;AAMD;;;yBAEIC,M,EAAa;AAChB,UAAI,KAAKC,aAAT,EAAwBC,OAAO,CAACC,IAAR,CAAa,kEAAb;;AAExB,UAAIC,MAAM,CAACC,cAAP,IAAyBD,MAAM,CAACC,cAAP,CAAsBC,SAAnD,EAA8D;AAC5D,aAAKN,MAAL,GAAc,2BAAUA,MAAV,EAAkBI,MAAM,CAACC,cAAP,CAAsBC,SAAtB,CAAgCC,SAAhC,IAA6C,EAA/D,EAAmE;AAC/EC,UAAAA,UAAU,EAAE,oBAACC,IAAD,EAAOC,MAAP;AAAA,mBAAkBA,MAAlB;AAAA;AADmE,SAAnE,CAAd;AAGD,OAJD,MAIO;AACL,aAAKV,MAAL,GAAcA,MAAd;AACD;;AAED,WAAKC,aAAL,GAAqB,IAArB;AACD;;;0BAEK;AACJ,aAAO,KAAKD,MAAZ;AACD;;;wBAEGW,Q,EAAqB;AACvB,WAAKX,MAAL,GAAc,2BAAU,KAAKA,MAAf,EAAuBW,QAAvB,EAAiC;AAC7CH,QAAAA,UAAU,EAAE,oBAACC,IAAD,EAAOC,MAAP;AAAA,iBAAkBA,MAAlB;AAAA;AADiC,OAAjC,CAAd;AAIA,WAAKE,WAAL,CACE;AACEC,QAAAA,aAAa,EAAE,sBADjB;AAEEC,QAAAA,IAAI,EAAE;AACJC,UAAAA,IAAI,EAAE,CAAC,WAAD,CADF;AAEJJ,UAAAA,QAAQ,EAAE,KAAKX,MAFX;AAGJgB,UAAAA,UAAU,EAAE;AAHR;AAFR,OADF;AAUD;;;6BAEQ;AACP,WAAKJ,WAAL,CAAiB;AACfC,QAAAA,aAAa,EAAE;AADA,OAAjB;AAGD;;;EArDwBI,kB,uFAIxBC,c;;AAoDI,IAAMC,KAAK,GAAG,IAAIxB,KAAJ,EAAd","sourcesContent":["import deepmerge from 'deepmerge';\nimport { KojiBridge } from '../bridge';\nimport { client } from '../@decorators/client';\n\ndeclare global {\n  interface Window { KOJI_OVERRIDES: any; }\n}\n\ntype EditorType = 'instant' | 'full';\ntype EditorMode = 'edit' | 'new';\n\ninterface EditorAttributes {\n  type?: EditorType;\n  mode?: EditorMode;\n}\n\ntype IsRemixingCallback = (isRemixing: boolean, editorAttributes: EditorAttributes) => Function;\n\nexport class Remix extends KojiBridge {\n  private values: any = {};\n  private isInitialized: boolean = false;\n\n  @client\n  subscribe(callback: IsRemixingCallback): Function {\n    return this.execCallbackOnMessage(\n      ({ isRemixing, editorAttributes }: { isRemixing: boolean; editorAttributes: EditorAttributes }) => {\n        callback(isRemixing, editorAttributes);\n      },\n      'KojiPreview.IsRemixing',\n    );\n  }\n\n  init(values: any) {\n    if (this.isInitialized) console.warn('You are trying to initialize your remix data more than one time.');\n\n    if (window.KOJI_OVERRIDES && window.KOJI_OVERRIDES.overrides) {\n      this.values = deepmerge(values, window.KOJI_OVERRIDES.overrides.remixData || {}, {\n        arrayMerge: (dest, source) => source,\n      });\n    } else {\n      this.values = values;\n    }\n\n    this.isInitialized = true;\n  }\n\n  get() {\n    return this.values;\n  }\n\n  set(newValue: any): void {\n    this.values = deepmerge(this.values, newValue, {\n      arrayMerge: (dest, source) => source,\n    });\n\n    this.sendMessage(\n      {\n        kojiEventName: 'KojiPreview.SetValue',\n        data: {\n          path: ['remixData'],\n          newValue: this.values,\n          skipUpdate: true,\n        },\n      },\n    );\n  }\n\n  finish() {\n    this.sendMessage({\n      kojiEventName: 'KojiPreview.Finish',\n    });\n  }\n}\n\nexport const remix = new Remix();\n"],"file":"index.js"}