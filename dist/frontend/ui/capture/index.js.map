{"version":3,"sources":["../../../../src/frontend/ui/capture/index.ts"],"names":["Capture","options","postToPlatform","kojiEventName","data","type","verbose","result","KojiBridge","client","capture"],"mappings":";;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAcaA,O;;;;;;;;;;;;;;;;;;;;;;AAECC,gBAAAA,O,2DAA+B,E;;uBACf,KAAKC,cAAL,CACxB;AACEC,kBAAAA,aAAa,EAAE,cADjB;AAEEC,kBAAAA,IAAI,EAAE;AACJC,oBAAAA,IAAI,EAAE,OADF;AAEJJ,oBAAAA,OAAO,EAAPA;AAFI;AAFR,iBADwB,EAQxB,qBARwB,C;;;AAApBG,gBAAAA,I;;qBAWFH,OAAO,CAACK,O;;;;;iDAAgBF,I;;;iDAErBA,IAAI,CAACG,M;;;;;;;;;;;;;;;;;;;EAhBaC,kB,0DAC1BC,c;;AAmBI,IAAMC,OAAO,GAAG,IAAIV,OAAJ,EAAhB","sourcesContent":["import { KojiBridge } from '../../bridge';\nimport { client } from '../../@decorators/client';\n\ninterface ColorControlOptions {\n  allowAlpha?: boolean;\n  verbose?: boolean;\n}\n\ninterface Color {\n  event: string;\n  result: string;\n  status: string;\n  type: string;\n}\n\nexport class Capture extends KojiBridge {\n  @client\n  async color(options: ColorControlOptions = {}): Promise<string | Color> {\n    const data: Color = await this.postToPlatform(\n      {\n        kojiEventName: 'Koji.Capture',\n        data: {\n          type: 'color',\n          options,\n        },\n      },\n      'Koji.CaptureSuccess',\n    );\n\n    if (options.verbose) return data;\n\n    return data.result;\n  }\n}\n\nexport const capture = new Capture();\n"],"file":"index.js"}