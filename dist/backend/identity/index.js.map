{"version":3,"sources":["../../../src/backend/identity/index.ts"],"names":["AuthRoutes","UserRole","Identity","config","rootPath","rootHeaders","projectId","projectToken","userId","notification","axios","post","PUSH_NOTIFICATION","headers","data","destination","token","GET_ROLE","role","grant","id","attributes","dateCreated","pushNotificationsEnabled","Base","server"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEYA,U;;;WAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;GAAAA,U,0BAAAA,U;;IAMAC,Q;;;WAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;GAAAA,Q,wBAAAA,Q;;IAqBCC,Q;;;;;AAIX,oBAAYC,MAAZ,EAA+C;AAAA;;AAAA;;AAC7C,8BAAMA,MAAN;;AAD6C;;AAAA;;AAG7C,UAAKC,QAAL,GAAgB,6BAAhB;AAEA,UAAKC,WAAL,GAAmB;AACjB,2BAAqB,MAAKC,SADT;AAEjB,8BAAwB,MAAKC,YAFZ;AAGjB,sBAAgB;AAHC,KAAnB;AAL6C;AAU9C;;;;;6GAGmCC,M,EAAgBC,Y;;;;;;;;uBAC3BC,kBAAMC,IAAN,WAAc,KAAKP,QAAnB,SAA8BJ,UAAU,CAACY,iBAAzC,GAA8D;AACnFC,kBAAAA,OAAO,EAAE,KAAKR,WADqE;AAEnFS,kBAAAA,IAAI,EAAE;AACJC,oBAAAA,WAAW,EAAEP,MADT;AAEJC,oBAAAA,YAAY,EAAZA;AAFI;AAF6E,iBAA9D,C;;;;AAAfK,gBAAAA,I,qBAAAA,I;iDAQDA,I;;;;;;;;;;;;;;;;;;;+GAI4BL,Y;;;;;;;;uBACZC,kBAAMC,IAAN,WAAc,KAAKP,QAAnB,SAA8BJ,UAAU,CAACY,iBAAzC,GAA8D;AACnFC,kBAAAA,OAAO,EAAE,KAAKR,WADqE;AAEnFS,kBAAAA,IAAI,EAAE;AACJC,oBAAAA,WAAW,EAAE,OADT;AAEJN,oBAAAA,YAAY,EAAZA;AAFI;AAF6E,iBAA9D,C;;;;AAAfK,gBAAAA,I,sBAAAA,I;kDAQDA,I;;;;;;;;;;;;;;;;;;;4GAIyBE,K;;;;;;;;uBACCN,kBAAMC,IAAN,WAAc,KAAKP,QAAnB,SAA8BJ,UAAU,CAACiB,QAAzC,GAAqD;AACpFJ,kBAAAA,OAAO,kCACF,KAAKR,WADH;AAEL,kDAA8BW;AAFzB;AAD6E,iBAArD,C;;;;AAAjBE,gBAAAA,I,sBAARJ,I,CAAQI,I;;uBAOkBR,kBAAMC,IAAN,WAAc,KAAKP,QAAnB,SAA8BJ,UAAU,CAACiB,QAAzC,GAAqD;AACrFJ,kBAAAA,OAAO,kCACF,KAAKR,WADH;AAEL,kDAA8BW;AAFzB;AAD8E,iBAArD,C;;;;AAAlBG,gBAAAA,K,sBAARL,I,CAAQK,K;kDAOT;AACLC,kBAAAA,EAAE,EAAED,KAAK,CAACX,MADL;AAELa,kBAAAA,UAAU,EAAEF,KAAK,CAACE,UAFb;AAGLC,kBAAAA,WAAW,EAAEH,KAAK,CAACG,WAHd;AAILC,kBAAAA,wBAAwB,EAAEJ,KAAK,CAACI,wBAJ3B;AAKLL,kBAAAA,IAAI,EAAJA;AALK,iB;;;;;;;;;;;;;;;;;;;EA1DmBM,U,mFAgB3BC,c,2KAaAA,c,yKAaAA,c","sourcesContent":["import axios from 'axios';\nimport { server } from '../@decorators/server';\nimport { Base, BackendConfigurationInput } from '../base';\n\nexport enum AuthRoutes {\n  GET_GRANT = '/v1/apps/auth/consumer/getGrantForToken',\n  GET_ROLE = '/v1/apps/auth/consumer/getRoleForToken',\n  PUSH_NOTIFICATION = '/v1/apps/auth/consumer/pushNotification',\n}\n\nexport enum UserRole {\n  ADMIN = 'admin',\n  UNKNOWN = 'unknown',\n  USER = 'user',\n}\n\nexport interface User {\n  id: string;\n  attributes: {[index: string]: any};\n  dateCreated: string;\n  pushNotificationsEnabled: boolean;\n  role: UserRole;\n}\n\nexport interface PushNotification {\n  appName: string;\n  icon: string;\n  message: string;\n  ref?: string;\n}\n\nexport class Identity extends Base {\n  private rootPath: string;\n  private rootHeaders: Object;\n\n  constructor(config: BackendConfigurationInput) {\n    super(config);\n\n    this.rootPath = 'https://rest.api.gokoji.com';\n\n    this.rootHeaders = {\n      'X-Koji-Project-Id': this.projectId,\n      'X-Koji-Project-Token': this.projectToken,\n      'Content-Type': 'application/json',\n    };\n  }\n\n  @server\n  public async pushNotificationToUser(userId: string, notification: PushNotification): Promise<void> {\n    const { data } = await axios.post(`${this.rootPath}${AuthRoutes.PUSH_NOTIFICATION}`, {\n      headers: this.rootHeaders,\n      data: {\n        destination: userId,\n        notification,\n      },\n    });\n\n    return data;\n  }\n\n  @server\n  public async pushNotificationToOwner(notification: PushNotification): Promise<void> {\n    const { data } = await axios.post(`${this.rootPath}${AuthRoutes.PUSH_NOTIFICATION}`, {\n      headers: this.rootHeaders,\n      data: {\n        destination: 'owner',\n        notification,\n      },\n    });\n\n    return data;\n  }\n\n  @server\n  public async resolveUserFromToken(token: UserToken): Promise<User> {\n    const { data: { role } } = await axios.post(`${this.rootPath}${AuthRoutes.GET_ROLE}`, {\n      headers: {\n        ...this.rootHeaders,\n        'X-Koji-Auth-Callback-Token': token,\n      },\n    });\n\n    const { data: { grant } } = await axios.post(`${this.rootPath}${AuthRoutes.GET_ROLE}`, {\n      headers: {\n        ...this.rootHeaders,\n        'X-Koji-Auth-Callback-Token': token,\n      },\n    });\n\n    return {\n      id: grant.userId,\n      attributes: grant.attributes,\n      dateCreated: grant.dateCreated,\n      pushNotificationsEnabled: grant.pushNotificationsEnabled,\n      role,\n    };\n  }\n}\n"],"file":"index.js"}