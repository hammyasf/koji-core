{"version":3,"sources":["../../../../src/frontend/ui/capture/index.ts"],"names":["Capture","options","verbose","sendMessageAndAwaitResponse","kojiEventName","data","type","result","KojiBridge","client","capture"],"mappings":"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","sourcesContent":["import { KojiBridge } from '../../kojiBridge';\nimport { client } from '../../@decorators/client';\n\nexport interface CaptureOptions {}\n\nexport interface CaptureColorOptions extends CaptureOptions {\n  allowAlpha?: boolean;\n}\n\nexport interface CaptureImageOptions extends CaptureOptions {\n  hideExtensions?: boolean;\n}\n\nexport type CaptureMediaAcceptOnly = 'image' | 'video' | 'audio' | 'file';\n\nexport type CaptureMediaReturnType = 'url' | 'extended';\n\nexport interface CaptureMediaVideoOptions {\n  hls?: boolean;\n  estimatePoses: boolean;\n}\n\nexport interface CaptureMediaImageOptions {\n  width?: number;\n}\n\nexport interface CaptureMediaOptions extends CaptureOptions {\n  acceptOnly?: CaptureMediaAcceptOnly[];\n  returnType?: CaptureMediaReturnType;\n  hideExtensions?: boolean;\n  videoOptions?: CaptureMediaVideoOptions;\n  imageOptions?: CaptureMediaImageOptions;\n}\n\nexport interface CaptureValue {\n  event: string;\n  result: string;\n  status: string;\n  type: string;\n}\n\nexport interface MediaCaptureValue {\n  event: string;\n  result: ExtendedCaptureMediaValue;\n  status: string;\n  type: string;\n}\n\nexport interface ExtendedCaptureMediaVideoMetadata {\n  thumbnailUrl: string;\n}\n\nexport interface ExtendedCaptureMediaAudioMetadata {\n  durationSeconds: number;\n}\n\nexport interface ExtendedCaptureMediaImageMetadata {\n  naturalWidth: number;\n  naturalHeight: number;\n}\n\nexport interface ExtendedCaptureMediaValue {\n  url: string;\n  type: string;\n  sizeBytes: string;\n  videoMetadata: ExtendedCaptureMediaVideoMetadata;\n  audioMetadata: ExtendedCaptureMediaAudioMetadata;\n  imageMetadata: ExtendedCaptureMediaImageMetadata;\n}\n\nexport interface CaptureRangeOptions extends CaptureOptions {\n  min?: number;\n  max?: number;\n  step?: number;\n}\n\nexport interface CaptureSelectOptionsOption {\n  value: string;\n  label?: string;\n}\n\nexport interface CaptureSelectOptions extends CaptureOptions {\n  placeholder?: string;\n  options?: CaptureSelectOptionsOption[];\n}\n\nexport interface CaptureSoundOptions extends CaptureOptions {\n  hideExtensions?: boolean;\n}\n\nexport interface CaptureVideoOptions extends CaptureOptions {\n  hls?: boolean;\n  estimatePoses?: boolean;\n}\n\nexport class Capture extends KojiBridge {\n  color(options: CaptureColorOptions, verbose: true): Promise<CaptureValue>;\n  color(options: CaptureColorOptions, verbose: false): Promise<string>;\n  color(options?: CaptureColorOptions): Promise<string>;\n  color(options: CaptureColorOptions, verbose: boolean): Promise<string | CaptureValue>;\n  @client\n  async color(options: CaptureColorOptions = {}, verbose: boolean = false): Promise<string | CaptureValue> {\n    const data: CaptureValue = await this.sendMessageAndAwaitResponse(\n      {\n        kojiEventName: 'Koji.Capture',\n        data: {\n          type: 'color',\n          options,\n        },\n      },\n      'Koji.CaptureSuccess',\n    );\n\n    if (verbose) return data;\n\n    return data.result;\n  }\n\n  file(options: CaptureOptions, verbose: true): Promise<CaptureValue>;\n  file(options: CaptureOptions, verbose: false): Promise<string>;\n  file(options?: CaptureOptions): Promise<string>;\n  file(options: CaptureOptions, verbose: boolean): Promise<string | CaptureValue>;\n  @client\n  async file(options: CaptureOptions = {}, verbose?: boolean): Promise<string | CaptureValue> {\n    const data: CaptureValue = await this.sendMessageAndAwaitResponse(\n      {\n        kojiEventName: 'Koji.Capture',\n        data: {\n          type: 'file',\n          options,\n        },\n      },\n      'Koji.CaptureSuccess',\n    );\n\n    if (verbose) return data;\n\n    return data.result;\n  }\n\n  image(options: CaptureImageOptions, verbose: true): Promise<CaptureValue>;\n  image(options: CaptureImageOptions, verbose: false): Promise<string>;\n  image(options?: CaptureImageOptions): Promise<string>;\n  image(options: CaptureImageOptions, verbose: boolean): Promise<string | CaptureValue>;\n  @client\n  async image(options: CaptureImageOptions = {}, verbose?: boolean): Promise<string | CaptureValue> {\n    const data: CaptureValue = await this.sendMessageAndAwaitResponse(\n      {\n        kojiEventName: 'Koji.Capture',\n        data: {\n          type: 'image',\n          options,\n        },\n      },\n      'Koji.CaptureSuccess',\n    );\n\n    if (verbose) return data;\n\n    return data.result;\n  }\n\n  koji(options: CaptureOptions, verbose: true): Promise<CaptureValue>;\n  koji(options: CaptureOptions, verbose: false): Promise<string>;\n  koji(options?: CaptureOptions): Promise<string>;\n  koji(options: CaptureOptions, verbose: boolean): Promise<string | CaptureValue>;\n  @client\n  async koji(options: CaptureOptions = {}, verbose?: boolean): Promise<string | CaptureValue> {\n    const data: CaptureValue = await this.sendMessageAndAwaitResponse(\n      {\n        kojiEventName: 'Koji.Capture',\n        data: {\n          type: 'koji',\n          options,\n        },\n      },\n      'Koji.CaptureSuccess',\n    );\n\n    if (verbose) return data;\n\n    return data.result;\n  }\n\n  media(options: { returnType: 'url' }, verbose: true): Promise<CaptureValue>;\n  media(options: { returnType: 'url' }, verbose: false): Promise<string>;\n  media(options: { returnType: 'extended' }, verbose: true): Promise<MediaCaptureValue>;\n  media(options: { returnType: 'extended' }, verbose: false): Promise<ExtendedCaptureMediaValue>;\n  media(options: CaptureMediaOptions, verbose: true): Promise<MediaCaptureValue>;\n  media(options: CaptureMediaOptions, verbose: false): Promise<ExtendedCaptureMediaValue>;\n  media(options?: CaptureMediaOptions): Promise<ExtendedCaptureMediaValue>;\n  media(options: CaptureMediaOptions, verbose: boolean): Promise<string | MediaCaptureValue | CaptureValue | ExtendedCaptureMediaValue>;\n  @client\n  async media(options: CaptureMediaOptions = {}, verbose?: boolean): Promise<string | MediaCaptureValue | CaptureValue | ExtendedCaptureMediaValue> {\n    const data: CaptureValue = await this.sendMessageAndAwaitResponse(\n      {\n        kojiEventName: 'Koji.Capture',\n        data: {\n          type: 'media',\n          options,\n        },\n      },\n      'Koji.CaptureSuccess',\n    );\n\n    if (verbose) return data;\n\n    return data.result;\n  }\n\n  range(options: CaptureRangeOptions, verbose: true): Promise<CaptureValue>;\n  range(options: CaptureRangeOptions, verbose: false): Promise<string>;\n  range(options?: CaptureRangeOptions): Promise<string>;\n  range(options: CaptureRangeOptions, verbose: boolean): Promise<string | CaptureValue>;\n  @client\n  async range(options: CaptureRangeOptions = {}, verbose?: boolean): Promise<string | CaptureValue> {\n    const data: CaptureValue = await this.sendMessageAndAwaitResponse(\n      {\n        kojiEventName: 'Koji.Capture',\n        data: {\n          type: 'range',\n          options,\n        },\n      },\n      'Koji.CaptureSuccess',\n    );\n\n    if (verbose) return data;\n\n    return data.result;\n  }\n\n  select(options: CaptureSelectOptions, verbose: true): Promise<CaptureValue>;\n  select(options: CaptureSelectOptions, verbose: false): Promise<string>;\n  select(options?: CaptureSelectOptions): Promise<string>;\n  select(options: CaptureSelectOptions, verbose: boolean): Promise<string | CaptureValue>;\n  @client\n  async select(options: CaptureSelectOptions = {}, verbose?: boolean): Promise<string | CaptureValue> {\n    const data: CaptureValue = await this.sendMessageAndAwaitResponse(\n      {\n        kojiEventName: 'Koji.Capture',\n        data: {\n          type: 'select',\n          options,\n        },\n      },\n      'Koji.CaptureSuccess',\n    );\n\n    if (verbose) return data;\n\n    return data.result;\n  }\n\n  sound(options: CaptureSoundOptions, verbose: true): Promise<CaptureValue>;\n  sound(options: CaptureSoundOptions, verbose: false): Promise<string>;\n  sound(options?: CaptureSoundOptions): Promise<string>;\n  sound(options: CaptureSoundOptions, verbose: boolean): Promise<string | CaptureValue>;\n  @client\n  async sound(options: CaptureSoundOptions = {}, verbose?: boolean): Promise<string | CaptureValue> {\n    const data: CaptureValue = await this.sendMessageAndAwaitResponse(\n      {\n        kojiEventName: 'Koji.Capture',\n        data: {\n          type: 'sound',\n          options,\n        },\n      },\n      'Koji.CaptureSuccess',\n    );\n\n    if (verbose) return data;\n\n    return data.result;\n  }\n\n  video(options: CaptureVideoOptions, verbose: true): Promise<CaptureValue>;\n  video(options: CaptureVideoOptions, verbose: false): Promise<string>;\n  video(options?: CaptureVideoOptions): Promise<string>;\n  video(options: CaptureVideoOptions, verbose: boolean): Promise<string | CaptureValue>;\n  @client\n  async video(options: CaptureVideoOptions = {}, verbose?: boolean): Promise<string | CaptureValue> {\n    const data: CaptureValue = await this.sendMessageAndAwaitResponse(\n      {\n        kojiEventName: 'Koji.Capture',\n        data: {\n          type: 'video',\n          options,\n        },\n      },\n      'Koji.CaptureSuccess',\n    );\n\n    if (verbose) return data;\n\n    return data.result;\n  }\n}\n\nexport const capture = new Capture();\n"],"file":"index.js"}