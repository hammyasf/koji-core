{"version":3,"sources":["../../../src/backend/secret/index.ts"],"names":["SecretRoutes","Secret","config","rootPath","rootHeaders","projectId","projectToken","keyPath","axios","post","KEYSTORE_GET","headers","data","scope","token","decryptedValue","resource","expireSeconds","CREATE_SIGNED_REQUEST","url","Base","server"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEKA,Y;;WAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;GAAAA,Y,KAAAA,Y;;IAKQC,M;;;;;AAIX,kBAAYC,MAAZ,EAA+C;AAAA;;AAAA;;AAC7C,8BAAMA,MAAN;;AAD6C;;AAAA;;AAG7C,UAAKC,QAAL,GAAgB,6BAAhB;AAEA,UAAKC,WAAL,GAAmB;AACjB,2BAAqB,MAAKC,SADT;AAEjB,8BAAwB,MAAKC,YAFZ;AAGjB,sBAAgB;AAHC,KAAnB;AAL6C;AAU9C;;;;;mGAG4BC,O;;;;;;;;uBACJC,kBAAMC,IAAN,WAAc,KAAKN,QAAnB,SAA8BH,YAAY,CAACU,YAA3C,GAA2D;AAChFC,kBAAAA,OAAO,EAAE,KAAKP,WADkE;AAEhFQ,kBAAAA,IAAI,EAAE;AACJC,oBAAAA,KAAK,EAAE,KAAKR,SADR;AAEJS,oBAAAA,KAAK,EAAE,KAAKR,YAFR;AAGJC,oBAAAA,OAAO,EAAPA;AAHI;AAF0E,iBAA3D,C;;;;AAAfK,gBAAAA,I,qBAAAA,I;iDASDA,IAAI,CAACG,c;;;;;;;;;;;;;;;;;;;yGAIiBC,Q,EAAkBC,a;;;;;;;;uBACxBT,kBAAMC,IAAN,WAAc,KAAKN,QAAnB,SAA8BH,YAAY,CAACkB,qBAA3C,GAAoE;AACzFP,kBAAAA,OAAO,EAAE,KAAKP,WAD2E;AAEzFQ,kBAAAA,IAAI,EAAE;AACJI,oBAAAA,QAAQ,EAARA,QADI;AAEJC,oBAAAA,aAAa,EAAbA;AAFI;AAFmF,iBAApE,C;;;;AAAfL,gBAAAA,I,sBAAAA,I;kDAQDA,IAAI,CAACO,G;;;;;;;;;;;;;;;;;;;EAxCYC,U,yEAgBzBC,c,2JAcAA,c","sourcesContent":["import axios from 'axios';\nimport { server } from '../@decorators/server';\nimport { Base, BackendConfigurationInput } from '../base';\n\nenum SecretRoutes {\n  KEYSTORE_GET = '/v1/keystore/get',\n  CREATE_SIGNED_REQUEST = '/v1/cdn/signedRequest/create',\n}\n\nexport class Secret extends Base {\n  private rootPath: string;\n  private rootHeaders: Object;\n\n  constructor(config: BackendConfigurationInput) {\n    super(config);\n\n    this.rootPath = 'https://rest.api.gokoji.com';\n\n    this.rootHeaders = {\n      'X-Koji-Project-Id': this.projectId,\n      'X-Koji-Project-Token': this.projectToken,\n      'Content-Type': 'application/json',\n    };\n  }\n\n  @server\n  public async resolveValue<T>(keyPath: string): Promise<T> {\n    const { data } = await axios.post(`${this.rootPath}${SecretRoutes.KEYSTORE_GET}`, {\n      headers: this.rootHeaders,\n      data: {\n        scope: this.projectId,\n        token: this.projectToken,\n        keyPath,\n      },\n    });\n\n    return data.decryptedValue;\n  }\n\n  @server\n  public async generateSignedUrl(resource: string, expireSeconds?: number): Promise<string> {\n    const { data } = await axios.post(`${this.rootPath}${SecretRoutes.CREATE_SIGNED_REQUEST}`, {\n      headers: this.rootHeaders,\n      data: {\n        resource,\n        expireSeconds,\n      },\n    });\n\n    return data.url;\n  }\n}\n"],"file":"index.js"}