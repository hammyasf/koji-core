{"version":3,"sources":["../../../../src/frontend/ui/capture/index.ts"],"names":["Capture","options","sendMessageAndAwaitResponse","kojiEventName","data","type","verbose","result","KojiBridge","client","capture"],"mappings":"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","sourcesContent":["import { KojiBridge } from '../../bridge';\nimport { client } from '../../@decorators/client';\n\nexport interface CaptureOptions {\n  verbose?: boolean;\n}\n\nexport interface CaptureColorOptions extends CaptureOptions {\n  allowAlpha?: boolean;\n}\n\nexport interface CaptureImageOptions extends CaptureOptions {\n  hideExtensions?: boolean;\n}\n\nexport type CaptureMediaAcceptOnly = 'image' | 'video' | 'audio' | 'file';\n\nexport type CaptureMediaReturnType = 'url' | 'extended';\n\nexport interface CaptureMediaVideoOptions {\n  hls?: boolean;\n  estimatePoses: boolean;\n}\n\nexport interface CaptureMediaImageOptions {\n  width?: number;\n}\n\nexport interface CaptureMediaOptions extends CaptureOptions {\n  acceptOnly?: CaptureMediaAcceptOnly[];\n  returnType?: CaptureMediaReturnType;\n  hideExtensions?: boolean;\n  videoOptions?: CaptureMediaVideoOptions;\n  imageOptions?: CaptureMediaImageOptions;\n}\n\nexport interface CaptureValue {\n  event: string;\n  result: string;\n  status: string;\n  type: string;\n}\n\nexport interface ExtendedCaptureMediaVideoMetadata {\n  thumbnailUrl: string;\n}\n\nexport interface ExtendedCaptureMediaAudioMetadata {\n  durationSeconds: number;\n}\n\nexport interface ExtendedCaptureMediaImageMetadata {\n  naturalWidth: number;\n  naturalHeight: number;\n}\n\nexport interface ExtendedCaptureMediaValue {\n  url: string;\n  type: string;\n  sizeBytes: string;\n  videoMetadata: ExtendedCaptureMediaVideoMetadata;\n  audioMetadata: ExtendedCaptureMediaAudioMetadata;\n  imageMetadata: ExtendedCaptureMediaImageMetadata;\n}\n\nexport interface CaptureRangeOptions extends CaptureOptions {\n  min?: number;\n  max?: number;\n  step?: number;\n}\n\nexport interface CaptureSelectOptionsOption {\n  value: string;\n  label?: string;\n}\n\nexport interface CaptureSelectOptions extends CaptureOptions {\n  placeholder?: string;\n  options?: CaptureSelectOptionsOption[];\n}\n\nexport interface CaptureSoundOptions extends CaptureOptions {\n  hideExtensions?: boolean;\n}\n\nexport interface CaptureVideoOptions extends CaptureOptions {\n  hls?: boolean;\n  estimatePoses?: boolean;\n}\n\nexport class Capture extends KojiBridge {\n  @client\n  async color(options: CaptureColorOptions = {}): Promise<string | CaptureValue> {\n    const data: CaptureValue = await this.sendMessageAndAwaitResponse(\n      {\n        kojiEventName: 'Koji.Capture',\n        data: {\n          type: 'color',\n          options,\n        },\n      },\n      'Koji.CaptureSuccess',\n    );\n\n    if (options.verbose) return data;\n\n    return data.result;\n  }\n\n  @client\n  async file(options: CaptureOptions = {}): Promise<string | CaptureValue> {\n    const data: CaptureValue = await this.sendMessageAndAwaitResponse(\n      {\n        kojiEventName: 'Koji.Capture',\n        data: {\n          type: 'file',\n          options,\n        },\n      },\n      'Koji.CaptureSuccess',\n    );\n\n    if (options.verbose) return data;\n\n    return data.result;\n  }\n\n  @client\n  async image(options: CaptureImageOptions = {}): Promise<string | CaptureValue> {\n    const data: CaptureValue = await this.sendMessageAndAwaitResponse(\n      {\n        kojiEventName: 'Koji.Capture',\n        data: {\n          type: 'image',\n          options,\n        },\n      },\n      'Koji.CaptureSuccess',\n    );\n\n    if (options.verbose) return data;\n\n    return data.result;\n  }\n\n  @client\n  async koji(options: CaptureOptions = {}): Promise<string | CaptureValue> {\n    const data: CaptureValue = await this.sendMessageAndAwaitResponse(\n      {\n        kojiEventName: 'Koji.Capture',\n        data: {\n          type: 'koji',\n          options,\n        },\n      },\n      'Koji.CaptureSuccess',\n    );\n\n    if (options.verbose) return data;\n\n    return data.result;\n  }\n\n  @client\n  async media(options: CaptureMediaOptions = {}): Promise<string | CaptureValue | ExtendedCaptureMediaValue> {\n    const data: CaptureValue = await this.sendMessageAndAwaitResponse(\n      {\n        kojiEventName: 'Koji.Capture',\n        data: {\n          type: 'media',\n          options,\n        },\n      },\n      'Koji.CaptureSuccess',\n    );\n\n    if (options.verbose) return data;\n\n    return data.result;\n  }\n\n  @client\n  async range(options: CaptureRangeOptions = {}): Promise<string | CaptureValue> {\n    const data: CaptureValue = await this.sendMessageAndAwaitResponse(\n      {\n        kojiEventName: 'Koji.Capture',\n        data: {\n          type: 'range',\n          options,\n        },\n      },\n      'Koji.CaptureSuccess',\n    );\n\n    if (options.verbose) return data;\n\n    return data.result;\n  }\n\n  @client\n  async select(options: CaptureSelectOptions = {}): Promise<string | CaptureValue> {\n    const data: CaptureValue = await this.sendMessageAndAwaitResponse(\n      {\n        kojiEventName: 'Koji.Capture',\n        data: {\n          type: 'select',\n          options,\n        },\n      },\n      'Koji.CaptureSuccess',\n    );\n\n    if (options.verbose) return data;\n\n    return data.result;\n  }\n\n  @client\n  async sound(options: CaptureSoundOptions = {}): Promise<string | CaptureValue> {\n    const data: CaptureValue = await this.sendMessageAndAwaitResponse(\n      {\n        kojiEventName: 'Koji.Capture',\n        data: {\n          type: 'sound',\n          options,\n        },\n      },\n      'Koji.CaptureSuccess',\n    );\n\n    if (options.verbose) return data;\n\n    return data.result;\n  }\n\n  @client\n  async video(options: CaptureVideoOptions = {}): Promise<string | CaptureValue> {\n    const data: CaptureValue = await this.sendMessageAndAwaitResponse(\n      {\n        kojiEventName: 'Koji.Capture',\n        data: {\n          type: 'video',\n          options,\n        },\n      },\n      'Koji.CaptureSuccess',\n    );\n\n    if (options.verbose) return data;\n\n    return data.result;\n  }\n}\n\nexport const capture = new Capture();\n"],"file":"index.js"}