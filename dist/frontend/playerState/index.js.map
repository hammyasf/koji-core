{"version":3,"sources":["../../../src/frontend/playerState/index.ts"],"names":["PlayerState","params","qs","parse","window","location","search","ignoreQueryPrefix","href","includes","context","receiptType","callback","execCallbackOnMessage","isRemixing","editorAttributes","KojiBridge","client","playerState"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;IAuBaA,W;;;;;AAIX,yBAAc;AAAA;;AAAA;AACZ;AADY;AAAA;;AAGZ,QAAMC,MAA+B,GAAGC,eAAGC,KAAH,CAASC,MAAM,CAACC,QAAP,CAAgBC,MAAzB,EAAiC;AAAEC,MAAAA,iBAAiB,EAAE;AAArB,KAAjC,CAAxC;;AAEA,QAAIH,MAAM,CAACC,QAAP,CAAgBG,IAAhB,CAAqBC,QAArB,CAA8B,iBAA9B,CAAJ,EAAsD;AACpD,YAAKC,OAAL,GAAe,YAAf;AACD,KAFD,MAEO;AAAA,4BACwDT,MADxD,CACGS,OADH;AAAA,UACGA,OADH,gCACa,MADb;AAAA,UACwCC,WADxC,GACwDV,MADxD,CACqB,iBADrB;AAGL,YAAKS,OAAL,GAAeA,OAAf;AACA,YAAKC,WAAL,GAAmBA,WAAnB;AACD;;AAZW;AAab;;;;8BAGSC,Q,EAAwC;AAChD,aAAO,KAAKC,qBAAL,CACL,gBAAmG;AAAA,YAAhGC,UAAgG,QAAhGA,UAAgG;AAAA,YAApFC,gBAAoF,QAApFA,gBAAoF;AACjGH,QAAAA,QAAQ,CAACE,UAAD,EAAaC,gBAAb,CAAR;AACD,OAHI,EAIL,wBAJK,CAAP;AAMD;;;EA3B8BC,kB,uFAmB9BC,c;;AAWI,IAAMC,WAAW,GAAG,IAAIlB,WAAJ,EAApB","sourcesContent":["import qs from 'qs';\nimport { KojiBridge } from '../bridge';\nimport { client } from '../@decorators/client';\n\nexport type PlayerStateContext = 'about' | 'admin' | 'remix' | 'sticker' | 'receipt' | 'screenshot' | 'view';\n\nexport type PlayerStateReceiptType = 'buyer' | 'seller';\n\nexport interface ExpectedQueryParameters {\n  context?: PlayerStateContext;\n  'dynamic-receipt'?: PlayerStateReceiptType;\n}\n\nexport type EditorType = 'instant' | 'full';\nexport type EditorMode = 'edit' | 'new';\n\nexport interface EditorAttributes {\n  type?: EditorType;\n  mode?: EditorMode;\n}\n\nexport type ReceiptType = 'seller' | 'buyer';\n\nexport type IsRemixingCallback = (isRemixing: boolean, editorAttributes: EditorAttributes) => Function;\n\nexport class PlayerState extends KojiBridge {\n  context: PlayerStateContext;\n  receiptType?: ReceiptType;\n\n  constructor() {\n    super();\n\n    const params: ExpectedQueryParameters = qs.parse(window.location.search, { ignoreQueryPrefix: true });\n\n    if (window.location.href.includes('koji-screenshot')) {\n      this.context = 'screenshot';\n    } else {\n      const { context = 'view', 'dynamic-receipt': receiptType } = params;\n\n      this.context = context;\n      this.receiptType = receiptType;\n    }\n  }\n\n  @client\n  subscribe(callback: IsRemixingCallback): Function {\n    return this.execCallbackOnMessage(\n      ({ isRemixing, editorAttributes }: { isRemixing: boolean; editorAttributes: EditorAttributes }) => {\n        callback(isRemixing, editorAttributes);\n      },\n      'KojiPreview.IsRemixing',\n    );\n  }\n}\n\nexport const playerState = new PlayerState();\n"],"file":"index.js"}